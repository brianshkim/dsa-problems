/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {boolean}
 */
var canFinish = function(numCourses, prerequisites) {
    let graph = buildGraph(numCourses, prerequisites)
   
    const visiting = new Set()
    const visited = new Set()

    for(let node in graph){
        if(hasCycle(graph, node,visiting, visited)){

      return false
    }
    }
    return true
    
};

const hasCycle = (graph, node, visiting, visited) =>{
    if(visited.has(node)) return false
  if(visiting.has(node)) return true
  visiting.add(node)
  
  for(let neighbor of graph[node]){
    if(hasCycle(graph, neighbor,visiting,visited)){
      return true
    }
  }
  
  visiting.delete(node)
  visited.add(node)
  
  return false
}

let buildGraph = (numCourses, prerequisites) =>{
    const graph = {}

    for(let i = 0;i<numCourses;i++){
        graph[i]=[]
    }

    for(let prereq of prerequisites){
        let [a, b] = prereq
        graph[b].push(a)
        

    }

    return graph
}
