    let dp=new Array(m).fill().map(()=>new Array(n).fill(1));
    
    for (let i = 1; i < m; i++) {
            for (let j = 1; j < n; j++) {
                 dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
    }
    console.log(dp)
        
    return dp[m-1][n-1]
    
    
    
    BFS - returns error
    //let queue = [[0,0]]
    //
    //let deltas = [[0,1], [1,0]]
    //let counter = 0;
    //while (queue.length > 0){
    //    
    //    let shifted = queue.shift()
    //    let [row, col] = shifted
    //    if(row===(m-1) && col===(n-1)){
    //        counter++
    //    }
    //   
    //          
    //    for(delta of deltas){
    //        let [drow, dcol] = delta
    //       
    //    if(row+drow <m && col+dcol < n){
    //        
    //            
    //            queue.push([row+drow, col+dcol])
    //       
    //    }
    //        
    //        
    //    }
    //          
    //    
    //}
    //
    //return counter
